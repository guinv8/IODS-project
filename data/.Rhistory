dim(learning2014)
str(learning2014)
str(learning2014)
learning2014
str(learning2014)
learning2014
data(learning2014)
str(learning2014)
data(learning2014)
str(learning2014)
dim(learning2014)
library(ggplot2)
p1 <- ggplot(learning2014, aes(x = Attitude, y = Points, col=gender))
p2 <- p1 + geom_point()
p3 <- p2 + geom_smooth(method = lm)
p3
p4 <- ggtitle("Student's attitude versus points")
library(ggplot2)
p1 <- ggplot(learning2014, aes(x = Attitude, y = Points, col=gender))
p2 <- p1 + geom_point()
p3 <- p2 + geom_smooth(method = lm)
p3
p4 <- ggtitle("Student's attitude versus points")
p4
ggtitle("Student's attitude versus points")
p4 <- ggtitle(p3, "Student's attitude versus points")
p4 <- ggtitle(p3, "Student's attitude versus points")
p4
p3 + ggtitle("Student's attitude versus points")
library(ggplot2)
p1 <- ggplot(learning2014, aes(x = Attitude, y = Points, col=gender))
p2 <- p1 + geom_point()
p3 <- p2 + geom_smooth(method = lm)
p3 + ggtitle("Student's attitude versus points")
library(GGally)
graph1 <- ggpairs(learning2014, mapping = aes(col=gender), lower = list(combo = wrap("facethist", bins = 20)))
graph1
```{r child = "chapter2.Rmd"}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
student_mat <- read_csv("C:/Users/Guilherme/Desktop/University of Helsinki/2016-2017/Period 2/Term 3/Open Data Science/IODS-project/data/student-mat.csv")
View(student_mat)
library(readr)
student_por <- read_csv("C:/Users/Guilherme/Desktop/University of Helsinki/2016-2017/Period 2/Term 3/Open Data Science/IODS-project/data/student-por.csv")
View(student_por)
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by)
math <- student_mat
por <- student_por
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by)
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by)
colnames(math)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by)
library(dplyr)
join_by <- c(school,sex,age,address,famsize,Pstatus,Medu,Fedu,Mjob,Fjob,reason,nursery,internet)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by)
math <- student_mat
por <- student_por
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by)
View(math)
View(por)
math_por <- inner_join(math, por, by = join_by)
join_by <- c('school',"sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by)
read.csv(student_mat)
read.csv(student-mat.csv)
d1=read.table("student-mat.csv",sep=";",header=TRUE)
math <-  read.csv("C:\Users\Guilherme\Desktop\University of Helsinki\2016-2017\Period 2\Term 3\Open Data Science\IODS-project\data\student-mat.csv", header = TRUE, sep=";")
math <-  read.csv(C:\Users\Guilherme\Desktop\University of Helsinki\2016-2017\Period 2\Term 3\Open Data Science\IODS-project\data\student-mat.csv", header = TRUE, sep=";")
por <-  read.csv("C:\Users\Guilherme\Desktop\University of Helsinki\2016-2017\Period 2\Term 3\Open Data Science\IODS-project\data\student-por.csv", header = TRUE, sep=";")
math <-  read.csv("C:\Users\Guilherme\Desktop\University of Helsinki\2016-2017\Period 2\Term 3\Open Data Science\IODS-project\data\student-mat.csv", header = TRUE, sep=";")
math <-  read.csv("C:\Users\Guilherme\Documents\GitHub\data\student-mat.csv", header = TRUE, sep=";")
library(readr)
student_mat <- read_delim("C:/Users/Guilherme/Desktop/University of Helsinki/2016-2017/Period 2/Term 3/Open Data Science/IODS-project/data/student-mat.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(student_mat)
library(readr)
student_por <- read_delim("C:/Users/Guilherme/Desktop/University of Helsinki/2016-2017/Period 2/Term 3/Open Data Science/IODS-project/data/student-por.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(student_por)
math <- student_mat
por < - student_por
por <- student_por
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
innerjoin_math_por <- inner_join(math, por, by= join_by, suffix= c(".math", ".por"))
colnames(innerjoin_math_por)
str(innerjoin_math_por)
dim(innerjoin_math_por)
alc <- select(innerjoin_math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(innerjoin_math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
glimpse(alc)
write.csv("C:\Users\Guilherme\Desktop\University of Helsinki\2016-2017\Period 2\Term 3\Open Data Science\IODS-project\data", row.names(FALSE))
library(MASS)
data("Boston")
str(Boston)
dim(Boston)
colnames(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
round(Boston, digits=2 )
cor_matrix
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
library(corrplot)
pairs(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
round(Boston, digits=2 )
cor_matrix
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
install.packages(corrplot)
install.packages("corrplot", repos="http://R-Forge.R-project.org")
install.packages("corrplot")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
pairs(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
round(Boston, digits=2 )
cor_matrix
cor_matrix
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
library(corrplot)
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
library(dplyr)
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 5)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 5)
lda.fit <- lda(crime ~., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 5)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 1)
classes <- as.numeric(test$crime)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 1)
lda.pred <- predict(lda.fit, newdata = test)
lda.pred$class
table(correct = correct_classes, predicted = lda.pred$class)
dist <- dist(Boston)
km <-kmeans(dist, centers = 5)
pairs(Boston, col = km$cluster)
km <-kmeans(dist, centers = 2)
pairs(Boston, col = km$cluster)
library(ggplot2)
distm <- dist(Boston, method="manhattan")
dist
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist, centers = 2)
library(ggplot2)
dist <- dist(Boston)
distm <- dist(Boston, method="manhattan")
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist, centers = 2)
pairs(Boston, col = km$cluster)
cor_matrix<-cor(Boston)
cor_matrix
round(Boston, digits=2 )
pairs(Boston)
cor_matrix<-cor(Boston)
library(corrplot)
pairs(Boston)
cor_matrix<-cor(Boston)
round(Boston, digits=2 )
cor_matrix
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
cor_matrix + title("Correlations Plot")
cor_matrix + ggtitle("Correlations Plot")
library(ggplot2)
cor_matrix + ggtitle("Correlations Plot")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6) + ggtitle("Correlations Plot")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, ggtitle("Correlations Plot"))
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, title= "Correlation Matrix")
colnames(Boston)
?corrplot
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = 1 title= "Correlation Matrix")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = 1, title= "Correlation Matrix")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = c(4,4,4,4), title= "Correlation Matrix")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = c(4,0,4,0), title= "Correlation Matrix")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = c(3,0,3,0), title= "Correlation Matrix")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = c(2,0,2,0), title= "Correlation Matrix")
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = c(3,0,2,0), title= "Correlation Matrix")
library(ggplot2)
library(corrplot)
pairs(Boston)
cor_matrix<-cor(Boston)
cor_matrix
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = c(3,0,2,0), title= "Correlation Matrix")
library(dplyr)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
library(dplyr)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
?scale
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
n_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
summary(boston_scaled)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
pairs(Boston)
pairs(Boston) +ggtitle("Correlation Matrix 1")
pairs(Boston, title="Correlation Matrix 1")
pairs(Boston)
cor_matrix<-cor(Boston)
cor_matrix
library(ggplot2)
library(corrplot)
pairs(Boston)
cor_matrix<-cor(Boston)
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = c(3,0,2,0), title= "Correlation Matrix")
lda.fit <- lda(crime ~., data = train)
library(MASS)
lda.fit <- lda(crime ~., data = train)
lda.fit
lda.fit <- lda(crime ~., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 3, col=classes, pch=classes)
plot(lda.fit, dimen = 1, col=classes, pch=classes)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 2)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 2)
lda.pred <- predict(lda.fit, newdata = test)
library(dplyr)
lda.pred <- predict(lda.fit, newdata = test)
lda.pred$class
table(correct = correct_classes, predicted = lda.pred$class)
library(MASS)
data("Boston")
str(Boston)
dim(Boston)
colnames(Boston)
library(ggplot2)
library(corrplot)
pairs(Boston)
cor_matrix<-cor(Boston)
corrplot(cor_matrix, method="circle", type= "upper", cl.pos="b", tl.pos="d", tl.cex=0.6, mar = c(3,0,2,0), title= "Correlation Matrix")
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col=classes, pch=classes)
lda.arrows(lda.fit, myscale = 2)
lda.pred <- predict(lda.fit, newdata = test)
lda.pred$class
table(correct = correct_classes, predicted = lda.pred$class)
library(ggplot2)
dist <- dist(Boston)
distm <- dist(Boston, method="manhattan")
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist, centers = 2)
pairs(Boston, col = km$cluster)
lda.pred <- predict(lda.fit, newdata = test)
lda.pred$class
table(correct = correct_classes, predicted = lda.pred$class)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
dist <- dist(Boston)
distm <- dist(Boston, method="manhattan")
distm
dist <- dist(boston_scaled)
boston
Boston
distm <- dist(Boston, method="manhattan")
table(distm)
summary(distm)
summary(dist)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist, k)$tot.withinss})
km <-kmeans(dist, centers = 2)
pairs(Boston, col = km$cluster)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
dim(hd)
str(gii)
dim(gii)
colnames(hd)
colnames(gii)
View(gii)
colnames(hd)[1] <- HDI Rank
colnames(hd)[1] <- "HDI Rank"
colnames(hd)
colnames(hd)[1,2] <- ("HDI Rank", "HD)
colnames(hd)[1,2] <- "HDI Rank" "HD"
colnames(hd)[1] <- "HDI Rank"
colnames(hd)[2] <- "Country"
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "Life"
colnames(hd)[5] <- "Exp"
colnames(hd)[6] <- "Mean"
colnames(hd)[7] <- "GNI"
colnames(hd)[8] <- "GNIminusHDI"
colnames(hd)
colnames(gii)[1] <- "GII Rank"
colnames(gii)[2] <- "Country"
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "Life"
colnames(gii)[5] <- "Adol"
colnames(gii)[6] <- "Parl"
colnames(gii)[7] <- "FSecondary"
colnames(gii)[8] <- "MSecondary"
colnames(gii)[9] <- "FLabor"
colnames(gii)[10] <- "MLabor"
colnames(gii)
gii <- mutate(gii, FMedu_ratio = FSecondary / MSecondary)
gii <- mutate(gii, FMlab_ratio = FLabor/MLabor)
colnames(gii)
library(Matrix)
library(ggplot2)
library(dplyr)
join_by <- c("Country")
hdi_gii <- inner_join(hd, gii, by= join_by, suffix= c(".hd", ".gii"))
colnames(hdi_gii)
setwd("C:/Users/Guilherme/Desktop/University of Helsinki/2016-2017/Period 2/Term 3/Open Data Science/IODS-project/data")
write.csv(hdi_gii, file = "human.csv", row.names = FALSE)
human <- read.csv("human.csv", sep=",", header= T)
